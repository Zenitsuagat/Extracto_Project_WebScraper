--- P #1 ---
Typically, we can define threads as a subprocess with lightweight with the smallest unit of processes and also has separate paths of execution. The main advantage of multiple threads is efficiency (allowing multiple things at the same time). For example, in MS Word. one thread automatically formats the document while another thread is taking user input. Another advantage is quick response, if we use multiple threads in a process and if a thread gets stuck due to lack of resources or an exception, the other threads can continue to execution, allowing the process (which represents an application) to continue to be responsive.

--- P #2 ---
Threads in a Shared Memory Environment in OS

--- P #3 ---
As we can observe in, the above diagram a thread runs inside the process and there will be context-based switching between threads there can be multiple processes running in OS, and each process again can have multiple threads running simultaneously. The Multithreading concept is popularly applied in games, animation…etc.

--- P #4 ---
To help users Operating System accommodates users the privilege of multitasking, where users can perform multiple actions simultaneously on the machine. This Multitasking can be enabled in two ways: 

--- P #5 ---
1. Process-Based Multitasking (Multiprocessing)

--- P #6 ---
In this type of Multitasking, processes are heavyweight and each process was allocated by a separate memory area. And as the process is heavyweight the cost of communication between processes is high and it takes a long time for switching between processes as it involves actions such as loading, saving in registers, updating maps, lists, etc. 

--- P #7 ---
2. Thread-Based Multitasking 

--- P #8 ---
As we discussed above Threads are provided with lightweight nature and share the same address space, and the cost of communication between threads is also low. 

--- P #9 ---
Now, we can understand why threads are being used as they had the advantage of being lightweight and can provide communication between multiple threads at a Low Cost contributing to effective multi-tasking within a shared memory environment. 

--- P #10 ---
There are different states Thread transfers into during its lifetime, let us know about those states in the following lines: in its lifetime, a thread undergoes the following states, namely: 

--- P #11 ---


--- P #12 ---
We can see the working of  different states in a Thread in the above Diagram, let us know in detail each and every state: 

--- P #13 ---
1. New State 

--- P #14 ---
By default, a Thread will be in a new state,  in this state, code has not yet been run and the execution process is not yet initiated. 

--- P #15 ---
2. Active State

--- P #16 ---
A Thread that is a new state by default gets transferred to Active state when it invokes the start() method, his Active state contains two sub-states namely:

--- P #17 ---
3. Waiting/Blocked State 

--- P #18 ---
If a Thread is inactive but on a temporary time, then either it is a waiting or blocked state, for example, if there are two threads, T1 and T2 where T1 needs to communicate to the camera and the other thread T2 already using a camera to scan then T1 waits until T2 Thread completes its work, at this state T1 is parked in waiting for the state, and in another scenario, the user called two Threads T2 and T3 with the same functionality and both had same time slice given by Thread Scheduler then both Threads T1, T2 is in a blocked state. When there are multiple threads parked in a Blocked/Waiting state Thread Scheduler clears Queue by rejecting unwanted Threads and allocating CPU on a priority basis. 

--- P #19 ---
4. Timed Waiting State

--- P #20 ---
Sometimes the longer duration of waiting for threads causes starvation, if we take an example like there are two threads T1, T2 waiting for CPU and T1 is undergoing a Critical Coding operation and if it does not exist the CPU until its operation gets executed then T2 will be exposed to longer waiting with undetermined certainty, In order to avoid this starvation situation, we had Timed Waiting for the state to avoid that kind of scenario as in Timed Waiting, each thread has a time period for which sleep() method is invoked and after the time expires the Threads starts executing its task. 

--- P #21 ---
5. Terminated State

--- P #22 ---
A thread will be in Terminated State, due to the below reasons: 

--- P #23 ---
As we are familiar, we create Main Method in each and every Java Program, which acts as an entry point for the code to get executed by JVM, Similarly in this Multithreading Concept, Each Program has one Main Thread which was provided by default by JVM, hence whenever a program is being created in java, JVM provides the Main Thread for its Execution. 

--- P #24 ---
We can create Threads in java using two ways, namely : 

--- P #25 ---
1. By Extending Thread Class 

--- P #26 ---
We can run Threads in Java by using Thread Class, which provides constructors and methods for creating and performing operations on a Thread, which extends a Thread class that can implement Runnable Interface. We use the following constructors for creating the Thread: 

--- P #27 ---
Sample code to create Threads by Extending Thread Class: 

--- P #28 ---
 Sample code to create Thread by using Runnable Interface:  

--- P #29 ---
 Sample Code to create Thread in Java using Thread(String name): 

--- P #30 ---
 Sample Java Code which creates Thread Object by using Thread(Runnable r, String name): 

--- P #31 ---
Java Program to explore different Thread States: 

--- P #32 ---
Let us see the working of thread states by implementing them on Threads t1 and t2. 

--- P #33 ---
Output:

--- P #34 ---
R

--- P #35 ---



